<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>obj_NPC</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables

//Initialize parent
event_inherited();

//Overwrite
type = "Enemy";
name = "Unnamed Enemy";
alarm[2] = 0;

//Combat variables
var pl = obj_Player.level;
level = randomRound(pl, pl + 2);
hpMax = 50 * (level + 1);
hp = hpMax;
target = noone;
aggroRange = 0;
targetDist = 0;
fov = 60;

//Movement variables
walkSpeed = 3;
path = 0;
grid = 0;
guardX = x;
guardY = y;
returning = false;

//Reward &amp; Drops
xp = 15 * level;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Target lost
if (!dead) {
    target = noone;
    path_end();
    
    //Follow target
    var cell = 32;
    grid = mp_grid_create(0, 0, room_width / cell, room_height / cell, cell, cell);
    path = path_add();
    mp_grid_add_instances(grid, obj_Terrain, false);
    mp_grid_path(grid, path, x, y, guardX, guardY, true);
    path_start(path, walkSpeed, "", false);
    returning = true;
    lookGoal = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hide auto UI on damage
hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for death
if (hp &lt;= 0 &amp;&amp; !dead) {
    dead = true;
    depth = 1;
    path_end();
    
    //Reward &amp; loot
    var p = instance_find(obj_Player, 0);
    p.xp += xp;
    
    //Progress quest
    switch (name) {
        case "Bandit Scrub": {
            if (p.quests[? "Revenge of Jotun"] &gt; -1) {
                if (p.quests[? "Revenge of Jotun"] &lt; 5) {
                    p.quests[? "Revenge of Jotun"] += 1;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check max range
aggroRange = 16;
var wall = noone;
while (!wall &amp;&amp; aggroRange &lt; 16 * 24) {
    var x2 = x + lengthdir_x(aggroRange, image_angle);
    var y2 = y + lengthdir_y(aggroRange, image_angle);
    wall = collision_line(x, y, x2, y2, obj_Terrain, false, true);
    aggroRange += 16;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for target
if (!dead) {
    if (target) {
        targetDist = distance_to_object(target);
        if (targetDist &lt;= floor(aggroRange * 0.5)) {
            var x2 = x + lengthdir_x(aggroRange, image_angle + (fov / 2));
            var y2 = y + lengthdir_y(aggroRange, image_angle + (fov / 2));
            var x3 = x + lengthdir_x(aggroRange, image_angle - (fov / 2));
            var y3 = y + lengthdir_y(aggroRange, image_angle - (fov / 2));
            var t = player_in_triangle(x, y, x2, y2, x3, y3);
            
            if (t) {
                //Target OK, refresh
                alarm[3] = 0;
                path_end();
                if (!target.dead) {
                    target.hp -= 0.1;
                    if (target.hp &lt; 0) {
                        target.hp = 0;
                    }
                }
            }
        }
        else {
            //Target lost, set timer once
            if (!alarm[3]) {
                alarm[3] = room_speed * 5;
                returning = false;
            }
            
            //Follow target
            var cell = 32;
            grid = mp_grid_create(0, 0, room_width / cell, room_height / cell, cell, cell);
            path = path_add();
            mp_grid_add_instances(grid, obj_Terrain, false);
            mp_grid_path(grid, path, x, y, target.x, target.y, true);
            path_start(path, walkSpeed, "", false);
        }
    }
    else {
        var x2 = x + lengthdir_x(aggroRange, image_angle + (fov / 2));
        var y2 = y + lengthdir_y(aggroRange, image_angle + (fov / 2));
        var x3 = x + lengthdir_x(aggroRange, image_angle - (fov / 2));
        var y3 = y + lengthdir_y(aggroRange, image_angle - (fov / 2));
        target = player_in_triangle(x, y, x2, y2, x3, y3);
    }
    
    //Has checked for new target
    if (target) {
        image_angle = point_direction(x, y, target.x, target.y);
    }
    else {
        //Look random
        if (lookGoal != 0) {
            var inc = (lookGoal / max(lookGoal, -lookGoal));
            image_angle += inc;
            lookGoal -= inc;
        }
        else {
            if (!alarm[1]) {
                if (returning) {
                    var f = 1 / path_get_length(path_index);
                    image_angle = point_direction(
                        path_get_x(path_index, path_position),
                        path_get_y(path_index, path_position),
                        path_get_x(path_index, path_position + f),
                        path_get_y(path_index, path_position + f)
                    );
                    if (path_position) {returning = false;}
                }
                else {
                    alarm[1] = randomRound(cdLookMin, cdLookMax);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw healthbar

//Inherit first
event_inherited();

//Draw bar frame
if (hover || hit) {
    var bh = 10;
    var by = yOff - cy - bh - 5;
    var c = c_black;
    if (dead) {c = c_red;}
    var x1 = x - view_xview[0] - cx;
    draw_rectangle_colour(x1, by, x - view_xview[0] + cx, by + bh, c, c, c, c, false);
    
    //Draw bar
    if (hp) {
        var px = getBarPixels(cx * 2, hp, hpMax);
        c = c_lime;
        draw_rectangle_colour(x1, by, x1 + px, by + bh, c, c, c, c, false);
        
        //draw_text(x1, by, "PX: " + string(px));
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw vision
if (!dead) {
    var c = c_lime;
    if (target) {
        c = c_red;
    }
    if (alarm[3]) {
        c = c_yellow;
    }
    
    var x2 = x - view_xview[0] + lengthdir_x(aggroRange, image_angle + (fov / 2));
    var y2 = y - view_yview[0] + lengthdir_y(aggroRange, image_angle + (fov / 2));
    var x3 = x - view_xview[0] + lengthdir_x(aggroRange, image_angle - (fov / 2));
    var y3 = y - view_yview[0] + lengthdir_y(aggroRange, image_angle - (fov / 2));
    
    draw_set_alpha(0.2);
        draw_triangle_colour(x - view_xview[0], y - view_yview[0], x2, y2, x3, y3, c, c, c, false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
