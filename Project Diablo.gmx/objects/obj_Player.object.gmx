<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize window &amp; settings
window_set_fullscreen(true);
draw_set_font(fnt_NPC);
draw_set_colour(c_white);

//random_set_seed(2);
randomize();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables

//Experience variables
level = 1;
xp = 0;
xpRequired = ds_list_create();
ds_list_add(xpRequired, 50);
for (var i = 1; i &lt;= 100; i++) {
    ds_list_add(xpRequired, xpRequired[| i - 1] + (15 * i));
}

//Power variables
strength = 1;
agility = 1;
intellect = 1;

//Combat variables
dead = false;
hpMax = 100;
hp = hpMax;
manaMax = 100;
mana = manaMax;
cdFractal = room_speed * 0.5;
costFractal = 10;

//Movement variables
walkSpeed = 4;

//Map variables
mapX = 0;
mapY = 0;
mapList = ds_list_create();
loadMap = 0;
pDir = "";
spawnX = x;
spawnY = y;
spawnOffset = false;

//Interface variables
showInventory = false;
bagList = ds_list_create();
ALPHA = 0.6;

//Quests
quests = ds_map_create();
quests[? "Valkyria's Welcome"] = false;
quests[? "Revenge of Jotun"] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Respawn
x = spawnX;
y = spawnY;
hp = hpMax;
mana = manaMax;
dead = false;
roomSpawn = false;

room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cooldown for fractal is ready
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Regen health
/*
if (floor(hp) &lt; hpMax) {
    hp += 0.1;
    if (hp &gt; hpMax) {
        hp = hpMax;
    }
}
*/

//Control max
if (hp &gt; hpMax) {
    hp = hpMax;
}

//Control min
if (hp &lt; 0) {
    hp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Regen mana
if (floor(mana) &lt; manaMax) {
    mana += 0.1;
    if (mana &gt; manaMax) {
        mana = manaMax;
    }
}

//Control max
if (mana &gt; manaMax) {
    mana = manaMax;
}

//Control min
if (mana &lt; 0) {
    mana = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input handling

//Global controls

//Interface toggles
if (keyboard_check_pressed(ord("B"))) {
    showInventory = !showInventory;
}

//Utility controls
if (keyboard_check_pressed(vk_escape)) {
    game_end();
}
if (keyboard_check_pressed(ord("R"))) {
    alarm[1] = 1;
}
if (keyboard_check_pressed(ord("T"))) {
    game_restart();
}

//Movement controls
var moveSpeed = walkSpeed;
if (keyboard_check(vk_shift)) {
    moveSpeed *= 3; 
}

var r = (sprite_width / 2);
if (keyboard_check(ord("A"))) {
    x -= moveSpeed;
    var wall = collision_line(x - r, y - r, x - r, y + r, obj_Terrain, false, true);
    if (wall) {
        x = wall.x + wall.sprite_width + r;
    }
}
if (keyboard_check(ord("D"))) {
    x += moveSpeed;
    var wall = collision_line(x + r, y - r, x + r, y + r, obj_Terrain, false, true);
    if (wall) {
        x = wall.x - r - 1;
    }
}
if (keyboard_check(ord("W"))) {
    y -= moveSpeed;
    var wall = collision_line(x - r, y - r, x + r, y - r, obj_Terrain, false, true);
    if (wall) {
        y = wall.y + wall.sprite_height + r;
    }
}
if (keyboard_check(ord("S"))) {
    y += moveSpeed;
    var wall = collision_line(x - r, y + r, x + r, y + r, obj_Terrain, false, true);
    if (wall) {
        y = wall.y - r - 1;
    }
}

//Combat controls
if (mouse_check_button(mb_left)) {
    //Check for cooldown
    if (!alarm[0] &amp;&amp; mana &gt;= costFractal) {
        alarm[0] = cdFractal;
        mana -= costFractal;
        
        //Make fractal bullet
        var b = instance_create(x, y, obj_Fractal);
        b.image_angle = image_angle;
        with (b) {
            motion_set(image_angle, 12);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Look at mouse
image_angle = point_direction(x, y, mouse_x, mouse_y);
direction = image_angle;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for death
if (!dead &amp;&amp; hp &lt;= 0) {
    dead = true;
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for levelup
var xpReq = xpRequired[| level - 1];
if (xp &gt;= xpReq) {
    xp -= xpReq;
    
    level += 1;
    strength += 1;
    agility += 1;
    intellect += 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_NPC">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prevent movement
if (!other.dead) {
    move_bounce_all(false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load or generate room

//Check if map is generated
if (loadMap) {
    //Load map
    var mx = real(loadMap[| 0]);
    var my = real(loadMap[| 1]);
    var mRom = real(loadMap[| 2]);
    var tx = real(loadMap[| 3]);
    var ty = real(loadMap[| 4]);
    var lx = real(loadMap[| 5]);
    var ly = real(loadMap[| 6]);
    var bx = real(loadMap[| 7]);
    var by = real(loadMap[| 8]);
    var rx = real(loadMap[| 9]);
    var ry = real(loadMap[| 10]);
    var bgNum = real(loadMap[| 11]);
    var event = loadMap[| 12];
    
    /*
    show_message(
        "T: " + string(tx) + ", " + string(ty) +
        "#L: " + string(lx) + ", " + string(ly) +
        "#B: " + string(bx) + ", " + string(by) +
        "#R: " + string(rx) + ", " + string(ry)
    );
    */
    
    if (tx &gt; -1) {
        with (instance_nearest(tx, ty, obj_Path_Entry)) {
            instance_destroy();
        }
    }
    if (lx &gt; -1) {
        with (instance_nearest(lx, ly, obj_Path_Entry)) {
            instance_destroy();
        }
    }
    if (bx &gt; -1) {
        with (instance_nearest(bx, by, obj_Path_Entry)) {
            instance_destroy();
        }
    }
    if (rx &gt; -1) {
        with (instance_nearest(rx, ry, obj_Path_Entry)) {
            instance_destroy();
        }
    }
    
    //Place player at entrance
    if (pDir == "up") {x = real(loadMap[| 7]); y = real(loadMap[| 8]);} //Walking up
    if (pDir == "left") {x = real(loadMap[| 9]); y = real(loadMap[| 10]);} //Walking left
    if (pDir == "down") {x = real(loadMap[| 3]); y = real(loadMap[| 4]);} //Walking down
    if (pDir == "right") {x = real(loadMap[| 5]); y = real(loadMap[| 6]);} //Walking right
    
    //Add player offset
    if (spawnOffset) {
        x += 64;
        y += 64;
    }
    
    //Select random biome
    background_index[0] = number_to_bg(bgNum);
    
    //Spawn event
    switch (event) {
        case "Jotun": {
            var npc = instance_create(1472, 832, obj_NPC);
            npc.name = "Jotun";
            break;
        }
    }
}
else {
    //Generate map
    var wallsTop = ds_list_create();
    var wallsLeft = ds_list_create();
    var wallsBottom = ds_list_create();
    var wallsRight = ds_list_create();
    
    var wallSize = 128;
    var wStr = string(mapX) + "," + string(mapY) + "," + string(room_to_number(room));
    
    //Sort all walls
    for (var i = 0; i &lt; instance_number(obj_Path_Entry); i++) {
        var wall = instance_find(obj_Path_Entry, i);
        
        if (wall.y == 0) {ds_list_add(wallsTop, wall);} //Wall aligned top
        if (wall.x == 0) {ds_list_add(wallsLeft, wall);} //Wall aligned left
        if (wall.y == room_height - wallSize) {ds_list_add(wallsBottom, wall);} //Wall aligned bottom
        if (wall.x == room_width - wallSize) {ds_list_add(wallsRight, wall);} //Wall aligned right
    }
    
    //Remove walls listed (1 random)
    var spawnChance = 60;
    var x1 = -1;
    var y1 = -1;
    if (ds_list_size(wallsTop)) {
        var wTop = map_check(mapList, mapX, mapY, "up");
        if (pDir == "down" || wTop == 1 || (wTop == 0 &amp;&amp; rollChance(spawnChance))) {
            //Destroy top wall
            var wallNum = randomRound(0, ds_list_size(wallsTop) - 1);
            var wall = wallsTop[| wallNum];
            x1 = wall.x;
            y1 = wall.y;
            if (pDir == "down") {
                x = x1;
                y = y1;
            }
        
            with (wall) {
                instance_destroy();
            }
        }
    }
    wStr += "," + string(x1) + "," + string(y1);
    
    x1 = -1;
    y1 = -1;
    if (ds_list_size(wallsLeft)) {
        var wLeft = map_check(mapList, mapX, mapY, "left");
        if (pDir == "right" || wLeft == 1 || (wLeft == 0 &amp;&amp; rollChance(spawnChance))) {
            //Destroy left wall
            var wallNum = randomRound(0, ds_list_size(wallsLeft) - 1);
            var wall = wallsLeft[| wallNum];
            x1 = wall.x;
            y1 = wall.y;
            if (pDir == "right") {
                x = x1;
                y = y1;
            }
        
            with (wall) {
                instance_destroy();
            }
        }
    }
    wStr += "," + string(x1) + "," + string(y1);
    
    x1 = -1;
    y1 = -1;
    if (ds_list_size(wallsBottom)) {
        var wBottom = map_check(mapList, mapX, mapY, "down");
        if (pDir == "up" || wBottom == 1 || (wBottom == 0 &amp;&amp; rollChance(spawnChance))) {
            //Destroy bottom wall
            var wallNum = randomRound(0, ds_list_size(wallsBottom) - 1);
            var wall = wallsBottom[| wallNum];
            x1 = wall.x;
            y1 = wall.y;
            if (pDir == "up") {
                x = x1;
                y = y1;
            }
        
            with (wall) {
                instance_destroy();
            }
        }
    }
    wStr += "," + string(x1) + "," + string(y1);
    
    x1 = -1;
    y1 = -1;
    if (ds_list_size(wallsRight)) {
        var wRight = map_check(mapList, mapX, mapY, "right");
        if (pDir == "left" || wRight == 1 || (wRight == 0 &amp;&amp; rollChance(spawnChance))) {
            //Destroy right wall
            var wallNum = randomRound(0, ds_list_size(wallsRight) - 1);
            var wall = wallsRight[| wallNum];
            x1 = wall.x;
            y1 = wall.y;
            if (pDir == "left") {
                x = x1;
                y = y1;
            }
        
            with (wall) {
                instance_destroy();
            }
        }
    }
    wStr += "," + string(x1) + "," + string(y1);
    
    //Add player offset
    if (spawnOffset) {
        x += 64;
        y += 64;
    }
    
    //Set player spawn
    spawnX = x;
    spawnY = y;
    
    //Select random biome
    var bgNum = choose(0, 1);
    background_index[0] = number_to_bg(bgNum);
    wStr += "," + string(bgNum);
    
    //Spawn random events
    switch (room) {
        case rom_Forest2: {
            if (!quests[? "Spawn Jotun"] &amp;&amp; rollChance(100)) {
                //Spawn Jotun
                var npc = instance_create(1472, 832, obj_NPC);
                npc.name = "Jotun";
                wStr += "," + "Jotun";
                
                quests[? "Spawn Jotun"] = true;
                break;
            }
        }
    }
    
    //Store data
    loadMap = string_explode(wStr, ",");
    ds_list_add(mapList, wStr);
    
    //Clean lists
    ds_list_destroy(wallsTop);
    ds_list_destroy(wallsLeft);
    ds_list_destroy(wallsBottom);
    ds_list_destroy(wallsRight);
}

//Easy generation view
//view_enabled = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to next room

//Apply direction
if (y &lt; 0) {mapY -= 1; pDir = "up"}
if (x &lt; 0) {mapX -= 1; pDir = "left"}
if (y &gt; room_height) {mapY += 1; pDir = "down"}
if (x &gt; room_width) {mapX += 1; pDir = "right"}

//Check if next room exists
var foundMap = -1;
loadMap = 0;

for (var i = 0; i &lt; ds_list_size(mapList); i++) {
    var strList = string_explode(mapList[| i], ",");
    var mx = real(strList[| 0]);
    var my = real(strList[| 1]);
    var mRom = real(strList[| 2]);
    
    if (mx == mapX &amp;&amp; my == mapY) {
        foundMap = mRom;
        loadMap = strList;
        break;
    }
}

if (foundMap &gt; -1) {
    //Load room
    room = number_to_room(foundMap);
}
else {
    //Select random room
    var roomNum = choose(1, 2, 3);
    /*
    switch (pDir) {
        case "up": {roomNum = choose(1, 2); break;}
        case "left": {roomNum = choose(1, 3); break;}
        case "down": {roomNum = choose(2, 3); break;}
        case "right": {roomNum = choose(3); break;}
    }
    */
    
    //Set room to the corresponding number
    room = number_to_room(roomNum);
}

spawnOffset = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw character info
var txt = "CHARACTER INFORMATION#" +
    "#Level: " + string(level) +
    "##Health: " + string(floor(hp)) + "/" + string(hpMax) +
    "#Mana: " + string(floor(mana)) + "/" + string(manaMax) +
    "#Experience: " + string(xp) + "/" + string(xpRequired[| level - 1]) +
    "##Strength: " + string(strength) +
    "#Agility: " + string(agility) +
    "#Intellect: " + string(intellect) +
    "##Map location: " + string(mapX) + ", " + string(mapY);
    
//Draw frame
var c = c_black;
var offset = 5;
var w = string_width(txt) + (offset * 2);
var h = string_height(txt) + (offset * 2);
var xx = window_get_width() - w - offset;
var yy = window_get_height() - h - offset;
draw_set_alpha(ALPHA);
    draw_rectangle_colour(xx, yy, xx + w, yy + h, c, c, c, c, false);
    
    //Draw hp bar
    var bh = string_height(txt) / 13;
    var bc = c_red;
    var by = yy + (bh * 4) + 2;
    if (hp &gt; 0) {
        draw_rectangle_colour(xx, by, xx + getBarPixels(w, hp, hpMax), by + bh, bc, bc, bc, bc, false);
    }
    
    //Draw mana bar
    bc = c_blue;
    by += bh;
    if (mana &gt; 0) {
        draw_rectangle_colour(xx, by, xx + getBarPixels(w, mana, manaMax), by + bh, bc, bc, bc, bc, false);
    }
    
    //Draw experience bar
    bc = c_yellow;
    by += bh;
    if (xp &gt; 0) {
        draw_rectangle_colour(xx, by, xx + getBarPixels(w, xp, xpRequired[| level - 1]), by + bh, bc, bc, bc, bc, false);
    }
draw_set_alpha(1);

//Draw text
draw_text(xx + offset, yy + offset, txt);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw inventory
if (showInventory) {
    var IW = 64;
    var IH = 128;
    var cx = window_get_width() / 2;
    var cy = window_get_height() / 2;
    var bagW = 8;
    var bagH = 3;
    
    //Draw frame
    var iOffset = 5;
    var fw = iOffset + (bagW * (IW + iOffset));
    var fh = iOffset + (bagH * (IH + iOffset));
    var fx = cx - (fw / 2);
    var fy = cy - (fh / 2);
    var c = c_black;
    draw_set_alpha(ALPHA);
        draw_rectangle_colour(fx, fy, fx + fw, fy + fh, c, c, c, c, false);
    draw_set_alpha(1);
    
    //Draw items
    for (var by = 0; by &lt; bagH; by++) {
        for (var bx = 0; bx &lt; bagW; bx++) {
            var itemData = 0;
            var iColor = "";
            var i = (by * bagW) + bx;
            if (i &lt; ds_list_size(bagList)) {
                itemData = string_explode(bagList[| i], "/");
                var iName = itemData[| 0];
                var iCount = real(itemData[| 1]);
                
                var itemInfo = item_info(iName);
                var iMaxStack = itemInfo[| 0];
                iColor = itemInfo[| 1];
                var iDesc = itemInfo[| 2];
            }
            var ix = fx + iOffset + (bx * (IW + iOffset));
            var iy = fy + iOffset + (by * (IH + iOffset));
            
            //Check mouse hover
            if (itemData) {
                if (mouse_x - view_xview[0] &gt;= ix &amp;&amp; mouse_x - view_xview[0] &lt;= ix + IW) {
                    if (mouse_y - view_yview[0] &gt;= iy &amp;&amp; mouse_y - view_yview[0] &lt;= iy + IH) {
                        //Check for click
                        if (mouse_check_button_pressed(mb_right)) {
                            var use = item_use(iName);
                            if (use == "Consumed") {
                                iCount--;
                                if (!iCount) {
                                    ds_list_delete(bagList, i);
                                }
                                else {
                                    bagList[| i] = iName + "/" + string(iCount);
                                }
                            }
                        }
                    
                        //Draw extra info
                        c = c_black;
                        var eiStr = iName + "##" + iDesc;
                        var eiw = string_width(eiStr) + (iOffset * 2);
                        var eih = string_height(eiStr) + (iOffset * 2);
                        var eix = ix - eiw;
                        var eiy = iy + (IH - eih);
                        
                        draw_set_alpha(ALPHA);
                            draw_rectangle_colour(eix, eiy, eix + eiw, eiy + eih, c, c, c, c, false);
                        draw_set_alpha(1);
                        
                        //draw_text_centered(eix + iOffset + (eiw / 2), eiy + iOffset + (eih / 2), eiStr);
                        draw_text(eix + iOffset, eiy + iOffset, eiStr);
                        
                        //Set highlight color
                        iColor = "Selected";
                    }
                }
            }
            
            //Get item quality color
            switch(iColor) {
                case "Selected": {c = c_yellow; break;}
                case "Normal": {c = c_white; break;}
                case "Uncommon": {c = c_lime; break;}
                case "Rare": {c = c_blue; break;}
                case "Epic": {c = c_purple; break;}
                case "Legendary": {c = c_orange; break;}
                default: {c = c_black; break;}
            }
            
            //Draw item frame
            draw_set_alpha(0.4);
                draw_rectangle_colour(ix, iy, ix + IW, iy + IH, c, c, c, c, false);
            draw_set_alpha(1);
            
            //Draw item
            if (itemData) {
                var spr = item_image(iName);
                draw_sprite(spr, 0, ix, iy);
            }
            
            //Draw framing
            draw_rectangle_colour(ix, iy, ix + IW, iy + IH, c, c, c, c, true);
            
            if (itemData) {
                if (iCount &gt; 1) {
                    //Draw item count
                    draw_text_centered(ix + (IW / 2), iy + IH - 16, "x" + string(iCount));
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw FPS
//draw_text(5, 5, "FPS: " + string(fps));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw quests
var qTxt = "QUESTS:#";
var qList = 0;
var qKey = ds_map_find_first(quests);
for (var i = 0; i &lt; ds_map_size(quests); i++) {
    var qInfo = questInfo(quests, qKey, level);
    var qLvl = qInfo[| 0];
    var qStatus = qInfo[| 1];
    var qDesc = qInfo[| 2];
    
    if (qLvl) {
        if (qStatus != "done") {
            if (qList) {qTxt += "#";}
            qTxt += "#" + string(qKey) + "#- " + qDesc;
            qList += 1;
        }
    }
    
    qKey = ds_map_find_next(quests, qKey);
}

var c = c_black;
var x1 = 5;
var y1 = 5;
var off = 5;
var x2 = x1 + string_width(qTxt) + (off * 2);
var y2 = y1 + string_height(qTxt) + (off * 2);

draw_set_alpha(ALPHA);
    draw_rectangle_colour(x1, y1, x2, y2, c, c, c, c, false);
draw_set_alpha(1);

draw_text(x1 + off, y1 + off, qTxt);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
