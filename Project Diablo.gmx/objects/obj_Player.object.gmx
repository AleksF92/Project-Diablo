<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize window &amp; settings
window_set_fullscreen(true);
draw_set_font(fnt_NPC);
draw_set_colour(c_white);

//random_set_seed(2);
randomize();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables

//Experience variables
level = 1;
xp = 0;
xpRequired = 100;

//Power variables
strength = 1;
agility = 1;
intellect = 1;

//Combat variables
dead = false;
hpMax = 100;
hp = hpMax;
manaMax = 100;
mana = manaMax;
cdFractal = room_speed * 0.5;
costFractal = 10;

//Movement variables
walkSpeed = 4;

//Map variables
mapX = 0;
mapY = 0;
mapList = ds_list_create();
ds_list_add(mapList, "0,0,0,-1,-1,1792,128,-1,-1,896,1024");
spawnX = x;
spawnY = y;

//Interface variables
showInventory = false;
bagList = ds_list_create();
//ds_list_add(bagList, "Apple/5");
ds_list_add(bagList, "Leather Chest/1");

//Quests
quests = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Respawn
x = spawnX;
y = spawnY;
hp = hpMax;
mana = manaMax;
dead = false;
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cooldown for fractal is ready
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Regen health
/*
if (floor(hp) &lt; hpMax) {
    hp += 0.1;
    if (hp &gt; hpMax) {
        hp = hpMax;
    }
}

//Control max
if (hp &gt; hpMax) {
    hp = hpMax;
}

//Control min
if (hp &lt; 0) {
    hp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Regen mana
if (floor(mana) &lt; manaMax) {
    mana += 0.1;
    if (mana &gt; manaMax) {
        mana = manaMax;
    }
}

//Control max
if (mana &gt; manaMax) {
    mana = manaMax;
}

//Control min
if (mana &lt; 0) {
    mana = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input handling

//Global controls

//Interface toggles
if (keyboard_check_pressed(ord("B"))) {
    showInventory = !showInventory;
}

//Utility controls
if (keyboard_check_pressed(vk_escape)) {
    game_end();
}
if (keyboard_check_pressed(ord("R"))) {
    alarm[1] = 1;
}

if (!showInventory) {
    //Movement controls
    var r = sprite_width / 2;
    if (keyboard_check(ord("A"))) {
        if (!collision_line(x - r, y, x - r - walkSpeed, y, obj_Terrain, false, true)) {
            x -= walkSpeed;
        }
    }
    if (keyboard_check(ord("D"))) {
        if (!collision_line(x + r, y, x + r + walkSpeed, y, obj_Terrain, false, true)) {
            x += walkSpeed;
        }
    }
    if (keyboard_check(ord("W"))) {
        if (!collision_line(x, y - r, x, y - r - walkSpeed, obj_Terrain, false, true)) {
            y -= walkSpeed;
        }
    }
    if (keyboard_check(ord("S"))) {
        if (!collision_line(x, y + r, x, y + r + walkSpeed, obj_Terrain, false, true)) {
            y += walkSpeed;
        }
    }
    
    //Combat controls
    if (mouse_check_button(mb_left)) {
        //Check for cooldown
        if (!alarm[0] &amp;&amp; mana &gt;= costFractal) {
            alarm[0] = cdFractal;
            mana -= costFractal;
            
            //Make fractal bullet
            var b = instance_create(x, y, obj_Fractal);
            b.image_angle = image_angle;
            with (b) {
                motion_set(image_angle, 12);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Look at mouse
image_angle = point_direction(x, y, mouse_x, mouse_y);
direction = image_angle;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for death
if (!dead &amp;&amp; hp &lt;= 0) {
    dead = true;
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_NPC">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prevent movement
if (!other.dead) {
    move_bounce_all(false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove walls
for (var i = 0; i &lt; ds_list_size(mapList); i++) {
    var strList = string_explode(mapList[| i], ",");
    var mx = real(strList[| 0]);
    var my = real(strList[| 1]);
    var mRom = real(strList[| 2]);
    
    if (mx == mapX &amp;&amp; my == mapY) {
        for (var j = 4; j &lt; ds_list_size(strList); j += 2) {
            var tx = real(strList[| j - 1]);
            var ty = real(strList[| j]);
            if (tx != -1 &amp;&amp; ty != -1) {
                var t = instance_nearest(tx, ty, obj_Terrain);
                with (t) {instance_destroy();}
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to next room

//Find direction
if (x &lt; 0) {mapX -= 1;}
if (x &gt; room_width) {mapX += 1;}
if (y &lt; 0) {mapY -= 1;}
if (y &gt; room_height) {mapY += 1;}

//Check if next room exists
var foundMap = -1;
var strList = 0;

for (var i = 0; i &lt; ds_list_size(mapList); i++) {
    strList = string_explode(mapList[| i], ",");
    var mx = real(strList[| 0]);
    var my = real(strList[| 1]);
    var mRom = real(strList[| 2]);
    
    if (mx == mapX &amp;&amp; my == mapY) {
        foundMap = mRom;
        break;
    }
}

if (foundMap &gt; -1) {
    //Load room
    switch (foundMap) {
        case 0: {room = rom_World; break;}
        case 1: {room = rom_Forest1; break;}
        case 2: {room = rom_Forest2; break;}
    }
    
    //Place at entrance
    if (x &lt; 0) {x = real(strList[| 5]); y = real(strList[| 6]);}
    if (x &gt; room_width) {x = real(strList[| 3]); y = real(strList[| 4]);}
    if (y &lt; 0) {x = real(strList[| 9]); y = real(strList[| 10]);}
    if (y &gt; room_height) {x = real(strList[| 7]); y = real(strList[| 8]);}
    x += 64;
    y += 64;
    if (y &gt; room_height) {y -= 64;}
    spawnX = x;
    spawnY = y;
}
else {
    //Select random room
    var roomNum = randomRound(1, 2);
    switch (roomNum) {
        case 0: {room = rom_World; break;}
        case 1: {room = rom_Forest1; break;}
        case 2: {room = rom_Forest2; break;}
    }
    
    //Remove random walls
    var wStr = string(mapX) + "," + string(mapY) + "," + string(roomNum);
    var ws = 128;
    var x1 = -1;
    var y1 = -1;
    var wLeft = map_check(mapList, mapX, mapY, "left");
    if ((choose(0, 1, 1) &amp;&amp; wLeft == 0) || (x &gt; room_width) || wLeft == 1) {
        //Left wall
        x1 = 0;
        y1 = ws * randomRound(1, 7);
        if (x &gt; room_width) {x = x1; y = y1;}
    }
    wStr += "," + string(x1) + "," + string(y1);
    
    x1 = -1;
    y1 = -1;
    var wRight = map_check(mapList, mapX, mapY, "right");
    if ((choose(0, 1, 1) &amp;&amp; wRight == 0) || (x &lt; 0) || wRight == 1) {
        //Right wall
        x1 = ws * 14;
        y1 = ws * randomRound(1, 7);
        if (x &lt; 0) {x = x1; y = y1;}
    }
    wStr += "," + string(x1) + "," + string(y1);
    
    x1 = -1;
    y1 = -1;
    var wUp = map_check(mapList, mapX, mapY, "up");
    if ((choose(0, 1, 1) &amp;&amp; wUp == 0) || (y &gt; room_height) || wUp == 1) {
        //Top wall
        x1 = ws * randomRound(1, 13);
        y1 = 0;
        if (y &gt; room_height) {x = x1; y = y1;}
    }
    wStr += "," + string(x1) + "," + string(y1);
    
    x1 = -1;
    y1 = -1;
    var wDown = map_check(mapList, mapX, mapY, "down");
    if ((choose(0, 1, 1) &amp;&amp; wDown == 0) || (y &lt; 0) || wDown == 1) {
        //Bottom wall
        x1 = ws * randomRound(1, 13);
        y1 = ws * 8;
        if (y &lt; 0) {x = x1; y = y1;}
    }
    wStr += "," + string(x1) + "," + string(y1);
    x += 64;
    y += 64;
    if (y &gt; room_height) {y -= 64;}
    spawnX = x;
    spawnY = y;
    
    //Store map information
    ds_list_add(mapList, wStr);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw character info
var txt = "CHARACTER INFORMATION#" +
    "#Health: " + string(floor(hp)) + "/" + string(hpMax) +
    "#Mana: " + string(floor(mana)) + "/" + string(manaMax) +
    "#Experience: " + string(xp) + "/" + string(xpRequired) +
    "##Strength: " + string(strength) +
    "#Agility: " + string(agility) +
    "#Intellect: " + string(intellect) +
    "##Map location: " + string(mapX) + ", " + string(mapY);
    
//Draw frame
var c = c_black;
var offset = 5;
var w = string_width(txt) + (offset * 2);
var h = string_height(txt) + (offset * 2);
var xx = room_width - w - offset;
var yy = room_height - h - offset;
draw_set_alpha(0.4);
    draw_rectangle_colour(xx, yy, xx + w, yy + h, c, c, c, c, false);
    
    //Draw hp bar
    var bh = string_height(txt) / 11;
    var bc = c_red;
    var by = yy + (bh * 2) + 2;
    if (hp &gt; 0) {
        draw_rectangle_colour(xx, by, xx + getBarPixels(w, hp, hpMax), by + bh, bc, bc, bc, bc, false);
    }
    
    //Draw mana bar
    bc = c_blue;
    by = yy + (bh * 3) + 2;
    if (mana &gt; 0) {
        draw_rectangle_colour(xx, by, xx + getBarPixels(w, mana, manaMax), by + bh, bc, bc, bc, bc, false);
    }
    
    //Draw experience bar
    bc = c_yellow;
    by = yy + (bh * 4) + 2;
    if (xp &gt; 0) {
        draw_rectangle_colour(xx, by, xx + getBarPixels(w, xp, xpMax), by + bh, bc, bc, bc, bc, false);
    }
draw_set_alpha(1);

//Draw text
draw_text(xx + offset, yy + offset, txt);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw inventory
if (showInventory) {
    var IW = 64;
    var IH = 128;
    var cx = window_get_width() / 2;
    var cy = window_get_height() / 2;
    var bagW = 8;
    var bagH = 3;
    
    //Draw frame
    var iOffset = 5;
    var fw = iOffset + (bagW * (IW + iOffset));
    var fh = iOffset + (bagH * (IH + iOffset));
    var fx = cx - (fw / 2);
    var fy = cy - (fh / 2);
    var c = c_black;
    draw_set_alpha(0.4);
        draw_rectangle_colour(fx, fy, fx + fw, fy + fh, c, c, c, c, false);
    draw_set_alpha(1);
    
    //Draw items
    for (var by = 0; by &lt; bagH; by++) {
        for (var bx = 0; bx &lt; bagW; bx++) {
            var itemData = 0;
            var iColor = "";
            var i = (by * bagW) + bx;
            if (i &lt; ds_list_size(bagList)) {
                itemData = string_explode(bagList[| i], "/");
                var iName = itemData[| 0];
                var iCount = real(itemData[| 1]);
                
                var itemInfo = item_info(iName);
                var iMaxStack = itemInfo[| 0];
                iColor = itemInfo[| 1];
                var iDesc = itemInfo[| 2];
            }
            var ix = fx + iOffset + (bx * (IW + iOffset));
            var iy = fy + iOffset + (by * (IH + iOffset));
            
            //Check mouse hover
            if (itemData) {
                if (mouse_x &gt;= ix &amp;&amp; mouse_x &lt;= ix + IW) {
                    if (mouse_y &gt;= iy &amp;&amp; mouse_y &lt;= iy + IH) {
                        //Check for click
                        if (mouse_check_button_pressed(mb_right)) {
                            var use = item_use(iName);
                            if (use == "Consumed") {
                                iCount--;
                                if (!iCount) {
                                    ds_list_delete(bagList, i);
                                }
                                else {
                                    bagList[| i] = iName + "/" + string(iCount);
                                }
                            }
                        }
                    
                        //Draw extra info
                        c = c_black;
                        var eiStr = iName + "##" + iDesc;
                        var eiw = string_width(eiStr) + (iOffset * 2);
                        var eih = string_height(eiStr) + (iOffset * 2);
                        var eix = ix - eiw;
                        var eiy = iy + (IH - eih);
                        
                        draw_set_alpha(0.6);
                            draw_rectangle_colour(eix, eiy, eix + eiw, eiy + eih, c, c, c, c, false);
                        draw_set_alpha(1);
                        
                        //draw_text_centered(eix + iOffset + (eiw / 2), eiy + iOffset + (eih / 2), eiStr);
                        draw_text(eix + iOffset, eiy + iOffset, eiStr);
                        
                        //Set highlight color
                        iColor = "Selected";
                    }
                }
            }
            
            //Get item quality color
            switch(iColor) {
                case "Selected": {c = c_yellow; break;}
                case "Normal": {c = c_white; break;}
                case "Uncommon": {c = c_lime; break;}
                case "Rare": {c = c_blue; break;}
                case "Epic": {c = c_purple; break;}
                case "Legendary": {c = c_orange; break;}
                default: {c = c_black; break;}
            }
            
            //Draw item frame
            draw_set_alpha(0.4);
                draw_rectangle_colour(ix, iy, ix + IW, iy + IH, c, c, c, c, false);
            draw_set_alpha(1);
            
            //Draw item
            if (itemData) {
                var spr = item_image(iName);
                draw_sprite(spr, 0, ix, iy);
            }
            
            //Draw framing
            draw_rectangle_colour(ix, iy, ix + IW, iy + IH, c, c, c, c, true);
            
            if (itemData) {
                if (iCount &gt; 1) {
                    //Draw item count
                    draw_text_centered(ix + (IW / 2), iy + IH - 16, "x" + string(iCount));
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
